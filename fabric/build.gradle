buildscript {
    dependencies {
        classpath 'de.guntram.mcmod:crowdin-translate:1.4+1.19-pre2'
    }
    repositories {
        maven {
            name = 'CrowdinTranslate source'
            url = "https://minecraft.guntram.de/maven/"
        }
    }
}

plugins {
    id "com.modrinth.minotaur" version "2.+"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

apply plugin: 'de.guntram.mcmod.crowdin-translate'
crowdintranslate.crowdinProjectName = rootProject.archives_base_name
crowdintranslate.minecraftProjectName = rootProject.archives_base_name
crowdintranslate.verbose = false

repositories {
    maven {
        url = "https://minecraft.guntram.de/maven/"
    }
    maven {
        url = "https://maven.terraformersmc.com/releases/com/terraformersmc/modmenu/"
    }
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    mixin.defaultRefmapName = "AntiGhost-refmap.json"
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${Versions['loader_version']}"
    modApi "net.fabricmc.fabric-api:fabric-api:${Versions['fabric_version']}"
    // Remove the next line if you don't want to depend on the API
    // modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"
    modImplementation "de.guntram.mcmod:crowdin-translate:${Versions['crowdintranslate_version']}"
    include "de.guntram.mcmod:crowdin-translate:${Versions['crowdintranslate_version']}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveBaseName.set "${rootProject.archives_base_name}-${Versions["minecraft_version"]}-fabric${Versions["fabric_versiononly"]}"
    classifier null
}

jar {
    from "LICENSE"
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

build {
    dependsOn downloadTranslations
}

import com.modrinth.minotaur.TaskModrinthUpload

modrinth {
    projectId = rootProject.archives_base_name
    versionName = rootProject.archives_base_name
    uploadFile = remapJar
}

curseforge {
    apiKey = System.getenv("CURSEFORGE_TOKEN") ?: "0"
    project {
        id = '273279'
        releaseType = 'release'
        addGameVersion("${Versions['minecraft_version']}")
        addGameVersion("Java " + targetCompatibility)
        addGameVersion("Fabric")
        mainArtifact(remapJar)
    }
    options {
        forgeGradleIntegration = false
    }
}
